@model AAO.Common.BCSCSelfAssessment.QuestionDetails
@{
    ViewBag.Title = "Index";
}
@if (TempData["Msg"] != null)
{
    <div class="alert alert-dismissable alert-info">
        <button type="button" class="close" data-dismiss="alert">×</button>
        @TempData["Msg"].ToString()
    </div>
}

@if (TempData["MsgError"] != null)
{
    <div class="alert alert-dismissable alert-danger">
        <button type="button" class="close" data-dismiss="alert">×</button>
        @TempData["MsgError"].ToString()
    </div>
}

    @*<div class="col-lg-4 pull-right">
            <div id="timecountdown" class="timer-assessment"></div>
            <i class="fa fa-clock-o fa-lg pull-right" id="icontoshow" style="padding-right:10px; padding-top: 7px;display:none;"></i>
        </div>*@

    <div id="countdownExample" class="col-lg-4 pull-right">
        <div class="values timer-assessment"></div>
        <i class="fa fa-clock-o fa-lg pull-right" id="icontoshow" style="padding-right:10px; padding-top: 7px;display:none;"></i>
    </div>

    <script src="@Url.Content("~/Scripts/Assessment/easytimer.min.js") " type="text/javascript"></script>
    <script>
    var timer = new Timer();
    var timerpause=true;
    </script>

    <div id="container">
        @Html.Partial("QuestionListIndex", Model)
    </div>
<div class="Cmodal"><!-- Place at bottom of page --></div>

    <script>
        var QuestionViewModel = {
        remainningtime : '@ViewBag.RemTime',
        examStatus :  @Convert.ToInt32(@Model.examStatus),
        examTimeType: @Convert.ToInt32(@Model.examTimeType),
        examId: '@Model.examId',
        ExamattemptId: '@Model.examAttemptId',
        url: '@Url.Action("SubmitExam")'
    };
    </script>
    <script src="~/Scripts/Assessment/Assessment.js"></script>
    <script src="~/Scripts/moment.min.js"></script>


    <script>

    if (QuestionViewModel.examTimeType == 1) {
        $.ajax({
            type: "POST",
            dataType: "json",
            data: { examId: AssessmentQuestionViewModel.examId },
            url: "/Assessment/GetExamTime",
            async: false,
            success: function (response) {
                if (QuestionViewModel.examStatus != 2 && QuestionViewModel.examTimeType == 1) {
                    $('#icontoshow').show();
                    timer.start({countdown: true, startValues: {seconds: response}});
                    $('#countdownExample .values').html(timer.getTimeValues().toString());
                    timer.addEventListener('secondsUpdated', function (e) {
                        $('#countdownExample .values').html(timer.getTimeValues().toString());
                    });
                    timer.addEventListener('targetAchieved', function (e) {
                        //$('#countdownExample .values').html('KABOOM!!');
                        $.ajax({
                            url: "/Assessment/SubmitExam",
                            type: 'POST',
                            cache: false,
                            dataType: "html",
                            data: { ExamId: QuestionViewModel.examId, ExamattemptId: QuestionViewModel.ExamattemptId },
                            success: function (result) {
                                if (result == 1) {
                                    window.location.href = '/ExamHistory/InfoMessage';
                                }
                            }
                            });
                    });
                }
            }
        });
    }


    window.setInterval(function () {
        if(timerpause){         
            keepAlive();
        }
    }, 5 * 1000); // 60 * 1000 milsec

        function keepAlive() {
            if (QuestionViewModel.examTimeType == 1) {
                $.ajax(
                    {
                        url: "/Assessment/UpdateTime",
                        type:'POST',
                        cache: false,
                        data: {examattemptId: QuestionViewModel.ExamattemptId },
                        success: function () { }
                    }
                );
            }
        }
    </script>





<style>
    .Cmodal {
        display: none;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background: rgba( 128,128,128, .8 ) url('/Content/img/Processing.gif') 50% 50% no-repeat;
    }

    /* When the body has the loading class, we turn
    the scrollbar off with overflow:hidden */
    body.loading {
        overflow: hidden;
        position: fixed;
        z-index: 1000;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        background: rgba( 128,128,128, .8 ) url('/Content/img/Processing.gif') 50% 50% no-repeat;
    }

        /* Anytime the body has the loading class, our
    modal element will be visible */
        body.loading .Cmodal {
            display: block;
        }
</style>