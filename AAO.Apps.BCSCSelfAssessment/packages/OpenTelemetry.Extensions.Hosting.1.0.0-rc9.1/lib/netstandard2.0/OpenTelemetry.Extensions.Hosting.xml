<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTelemetry.Extensions.Hosting</name>
    </assembly>
    <members>
        <member name="T:OpenTelemetry.Extensions.Hosting.Implementation.HostingExtensionsEventSource">
            <summary>
            EventSource events emitted from the project.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.MeterProviderBuilderHosting">
            <summary>
            A <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilderBase"/> with support for deferred initialization using <see cref="T:System.IServiceProvider"/> for dependency injection.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Metrics.MeterProviderBuilderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> class.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.AddInstrumentation``1(OpenTelemetry.Metrics.MeterProviderBuilder)">
            <summary>
            Adds instrumentation to the provider.
            </summary>
            <typeparam name="T">Instrumentation type.</typeparam>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.AddReader``1(OpenTelemetry.Metrics.MeterProviderBuilder)">
            <summary>
            Adds a reader to the provider.
            </summary>
            <typeparam name="T">Reader type.</typeparam>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.Configure(OpenTelemetry.Metrics.MeterProviderBuilder,System.Action{System.IServiceProvider,OpenTelemetry.Metrics.MeterProviderBuilder})">
            <summary>
            Register a callback action to configure the <see
            cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> once the application <see
            cref="T:System.IServiceProvider"/> is available.
            </summary>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <param name="configure">Configuration callback.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.GetServices(OpenTelemetry.Metrics.MeterProviderBuilder)">
            <summary>
            Gets the application <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> attached to
            the <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.
            </summary>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> or <see langword="null"/>
            if services are unavailable.</returns>
        </member>
        <member name="M:OpenTelemetry.Metrics.MeterProviderBuilderExtensions.Build(OpenTelemetry.Metrics.MeterProviderBuilder,System.IServiceProvider)">
            <summary>
            Run the configured actions to initialize the <see cref="T:OpenTelemetry.Metrics.MeterProvider"/>.
            </summary>
            <param name="meterProviderBuilder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <param name="serviceProvider"><see cref="T:System.IServiceProvider"/>.</param>
            <returns><see cref="T:OpenTelemetry.Metrics.MeterProvider"/>.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.TracerProviderBuilderHosting">
            <summary>
            A <see cref="T:OpenTelemetry.Trace.TracerProviderBuilderBase"/> with support for deferred initialization using <see cref="T:System.IServiceProvider"/> for dependency injection.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.TracerProviderBuilderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> class.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.AddInstrumentation``1(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Adds instrumentation to the provider.
            </summary>
            <typeparam name="T">Instrumentation type.</typeparam>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.AddProcessor``1(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Adds a processor to the provider.
            </summary>
            <typeparam name="T">Processor type.</typeparam>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.SetSampler``1(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Sets the sampler on the provider.
            </summary>
            <typeparam name="T">Sampler type.</typeparam>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.Configure(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{System.IServiceProvider,OpenTelemetry.Trace.TracerProviderBuilder})">
            <summary>
            Register a callback action to configure the <see
            cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> once the application <see
            cref="T:System.IServiceProvider"/> is available.
            </summary>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <param name="configure">Configuration callback.</param>
            <returns>The supplied <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> for chaining.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.GetServices(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Gets the application <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> attached to
            the <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.
            </summary>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> or <see langword="null"/>
            if services are unavailable.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.Build(OpenTelemetry.Trace.TracerProviderBuilder,System.IServiceProvider)">
            <summary>
            Run the configured actions to initialize the <see cref="T:OpenTelemetry.Trace.TracerProvider"/>.
            </summary>
            <param name="tracerProviderBuilder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <param name="serviceProvider"><see cref="T:System.IServiceProvider"/>.</param>
            <returns><see cref="T:OpenTelemetry.Trace.TracerProvider"/>.</returns>
        </member>
        <member name="M:OpenTelemetry.Internal.ExceptionExtensions.ToInvariantString(System.Exception)">
            <summary>
            Returns a culture-independent string representation of the given <paramref name="exception"/> object,
            appropriate for diagnostics tracing.
            </summary>
            <param name="exception">Exception to convert to string.</param>
            <returns>Exception as string with no culture.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.Guard">
            <summary>
            Methods for guarding against exception throwing values.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throw an exception if the value is null.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or empty.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or whitespace.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfZero(System.Int32,System.String,System.String)">
            <summary>
            Throw an exception if the value is zero.
            </summary>
            <param name="value">The value to check.</param>
            <param name="message">The message to use in the thrown exception.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfInvalidTimeout(System.Int32,System.String)">
            <summary>
            Throw an exception if the value is not considered a valid timeout.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Double,System.String,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNotOfType``1(System.Object,System.String)">
            <summary>
            Throw an exception if the value is not of the expected type.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <typeparam name="T">The type attempted to convert to.</typeparam>
            <returns>The value casted to the specified type.</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.OpenTelemetryServicesExtensions">
            <summary>
            Extension methods for setting up OpenTelemetry services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenTelemetryServicesExtensions.AddOpenTelemetryTracing(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds OpenTelemetry TracerProvider to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenTelemetryServicesExtensions.AddOpenTelemetryTracing(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{OpenTelemetry.Trace.TracerProviderBuilder})">
            <summary>
            Adds OpenTelemetry TracerProvider to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="configure">Callback action to configure the <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenTelemetryServicesExtensions.AddOpenTelemetryMetrics(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds OpenTelemetry MeterProvider to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenTelemetryServicesExtensions.AddOpenTelemetryMetrics(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{OpenTelemetry.Metrics.MeterProviderBuilder})">
            <summary>
            Adds OpenTelemetry MeterProvider to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="configure">Callback action to configure the <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenTelemetryServicesExtensions.AddOpenTelemetryTracing(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,OpenTelemetry.Trace.TracerProvider})">
            <summary>
            Adds OpenTelemetry TracerProvider to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="createTracerProvider">A delegate that provides the tracer provider to be registered.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OpenTelemetryServicesExtensions.AddOpenTelemetryMetrics(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,OpenTelemetry.Metrics.MeterProvider})">
            <summary>
            Adds OpenTelemetry MeterProvider to the specified <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="createMeterProvider">A delegate that provides the tracer provider to be registered.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> so that additional calls can be chained.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            Allows capturing of the expressions passed to a method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The name of the targeted parameter.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the target parameter name of the CallerArgumentExpression.
            </summary>
        </member>
    </members>
</doc>
