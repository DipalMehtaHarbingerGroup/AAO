<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTelemetry.Instrumentation.Wcf</name>
    </assembly>
    <members>
        <member name="T:OpenTelemetry.Instrumentation.Wcf.WcfInstrumentationActivitySource">
            <summary>
            WCF instrumentation.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.Implementation.WcfInstrumentationEventSource.ToInvariantString(System.Exception)">
            <summary>
            Returns a culture-independent string representation of the given <paramref name="exception"/> object,
            appropriate for diagnostics tracing.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Wcf.TelemetryClientMessageInspector">
            <summary>
            An <see cref="T:System.ServiceModel.Dispatcher.IClientMessageInspector"/> implementation which adds telemetry to outgoing requests.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Wcf.TelemetryContractBehaviorAttribute">
            <summary>
            An <see cref="T:System.ServiceModel.Description.IContractBehavior"/> <see cref="T:System.Attribute"/> to add the
            <see cref="T:OpenTelemetry.Instrumentation.Wcf.TelemetryDispatchMessageInspector"/> to service operations
            and <see cref="T:OpenTelemetry.Instrumentation.Wcf.TelemetryClientMessageInspector"/> to client operations
            programmatically.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryContractBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryContractBehaviorAttribute.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryContractBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryContractBehaviorAttribute.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <inheritdoc />
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Wcf.TelemetryDispatchMessageInspector">
            <summary>
            An <see cref="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector"/> implementation which adds telemetry to incoming requests.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Wcf.TelemetryEndpointBehavior">
            <summary>
            An <see cref="T:System.ServiceModel.Description.IEndpointBehavior"/> implementation which adds the <see
            cref="T:OpenTelemetry.Instrumentation.Wcf.TelemetryClientMessageInspector"/> to client endpoints and the
            <see cref="T:OpenTelemetry.Instrumentation.Wcf.TelemetryDispatchMessageInspector"/> to service endpoints.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Wcf.TelemetryEndpointBehaviorExtensionElement">
            <summary>
            A <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement"/> for registering <see cref="T:OpenTelemetry.Instrumentation.Wcf.TelemetryEndpointBehavior"/> on a service endpoint through configuration.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Wcf.TelemetryEndpointBehaviorExtensionElement.BehaviorType">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryEndpointBehaviorExtensionElement.CreateBehavior">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Wcf.TelemetryServiceBehavior">
            <summary>
            An <see cref="T:System.ServiceModel.Description.IServiceBehavior"/> implementation to add the
            <see cref="T:OpenTelemetry.Instrumentation.Wcf.TelemetryDispatchMessageInspector"/> to service operations.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <inheritdoc />
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Wcf.TelemetryServiceBehaviorExtensionElement">
            <summary>
            A <see cref="T:System.ServiceModel.Configuration.BehaviorExtensionElement"/> for registering <see cref="T:OpenTelemetry.Instrumentation.Wcf.TelemetryServiceBehavior"/> on a service through configuration.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Wcf.TelemetryServiceBehaviorExtensionElement.BehaviorType">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Wcf.TelemetryServiceBehaviorExtensionElement.CreateBehavior">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Wcf.WcfEnrichEventNames">
            <summary>
            Constants used for event names when enriching an activity.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Instrumentation.Wcf.WcfEnrichEventNames.AfterReceiveRequest">
            <summary>
            WCF service activity, event happens before WCF service method is invoked.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Instrumentation.Wcf.WcfEnrichEventNames.BeforeSendReply">
            <summary>
            WCF service activity, event happens after the WCF service method is invoked but before the reply is sent back to the client.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Instrumentation.Wcf.WcfEnrichEventNames.BeforeSendRequest">
            <summary>
            WCF client activity, event happens before the request is sent across the wire.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Instrumentation.Wcf.WcfEnrichEventNames.AfterReceiveReply">
            <summary>
            WCF client activity, event happens after a reply from the WCF service is received.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Wcf.WcfInstrumentationOptions">
            <summary>
            Options for WCF instrumentation.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Wcf.WcfInstrumentationOptions.Enrich">
            <summary>
            Gets or sets an action to enrich an Activity.
            </summary>
            <remarks>
            <para><see cref="T:System.Diagnostics.Activity"/>: the activity being enriched.</para>
            <para>string: the name of the event. Will be one of the constants in <see cref="T:OpenTelemetry.Instrumentation.Wcf.WcfEnrichEventNames"/>.
            </para>
            <para>object: the raw <see cref="T:System.ServiceModel.Channels.Message"/> from which additional information can be extracted to enrich the activity.
            </para>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Wcf.WcfInstrumentationOptions.IncomingRequestFilter">
            <summary>
            Gets or sets a Filter function to filter instrumentation for requests on a per request basis.
            The Filter gets the Message, and should return a boolean.
            If Filter returns true, the request is collected.
            If Filter returns false or throw exception, the request is filtered out.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Wcf.WcfInstrumentationOptions.OutgoingRequestFilter">
            <summary>
            Gets or sets a Filter function to filter instrumentation for requests on a per request basis.
            The Filter gets the Message, and should return a boolean.
            If Filter returns true, the request is collected.
            If Filter returns false or throw exception, the request is filtered out.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Wcf.WcfInstrumentationOptions.SuppressDownstreamInstrumentation">
            <summary>
            Gets or sets a value indicating whether down stream instrumentation (HttpClient) is suppressed (disabled). Default value: True.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Wcf.WcfInstrumentationOptions.SetSoapMessageVersion">
            <summary>
            Gets or sets a value indicating whether or not the SOAP message version should be added as the <see cref="F:OpenTelemetry.Instrumentation.Wcf.WcfInstrumentationConstants.SoapMessageVersionTag"/> tag. Default value: False.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.TracerProviderBuilderExtensions">
            <summary>
            Extension methods to simplify registering of dependency instrumentation.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.TracerProviderBuilderExtensions.AddWcfInstrumentation(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{OpenTelemetry.Instrumentation.Wcf.WcfInstrumentationOptions})">
            <summary>
            Enables the outgoing requests automatic data collection for WCF.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilderExtensions"/> being configured.</param>
            <param name="configure">Wcf configuration options.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilderExtensions"/> to chain the calls.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.Guard">
            <summary>
            Methods for guarding against exception throwing values.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throw an exception if the value is null.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or empty.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or whitespace.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfZero(System.Int32,System.String,System.String)">
            <summary>
            Throw an exception if the value is zero.
            </summary>
            <param name="value">The value to check.</param>
            <param name="message">The message to use in the thrown exception.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfInvalidTimeout(System.Int32,System.String)">
            <summary>
            Throw an exception if the value is not considered a valid timeout.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Double,System.String,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNotOfType``1(System.Object,System.String)">
            <summary>
            Throw an exception if the value is not of the expected type.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <typeparam name="T">The type attempted to convert to.</typeparam>
            <returns>The value casted to the specified type.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            Allows capturing of the expressions passed to a method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The name of the targeted parameter.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the target parameter name of the CallerArgumentExpression.
            </summary>
        </member>
    </members>
</doc>
